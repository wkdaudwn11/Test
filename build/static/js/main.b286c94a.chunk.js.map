{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","pending","setPending","data","setData","useEffect","setTimeout","handleClick","val","url","window","location","host","indexOf","console","log","routing","fetch","method","headers","then","response","json","JSON","stringify","onClick","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oKAqDeA,EAnDH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEQF,mBAAS,MAFjB,mBAETG,EAFS,KAEHC,EAFG,KAIhBC,qBAAU,WACRC,YAAW,WACTC,EAAY,KACX,OACF,IAEH,IAAMA,EAAc,SAACC,GACnB,IAAIC,EAAM,4BACV,IAAmD,IAA/CC,OAAOC,SAASC,KAAKC,QAAQ,aAAqB,CAAC,IAC7CD,EAASF,OAAOC,SAAhBC,KACRH,EAAG,UAAMG,EAAN,aACHE,QAAQC,IAAIN,GAEd,IAAIO,EAAU,OACF,IAARR,EACFQ,EAAU,QACO,IAARR,IACTQ,EAAU,SAEZP,EAAG,UAAMA,EAAN,YAAaO,GAEhBC,MAAMR,EAAK,CACTS,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAIjBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACLnB,GAAW,GACXE,EAAQmB,KAAKC,UAAUH,QAI7B,OAAIpB,EAAgB,2CAElB,6BACGE,EACD,6BACA,4BAAQsB,QAAS,kBAAMlB,EAAY,KAAnC,SACA,4BAAQkB,QAAS,kBAAMlB,EAAY,KAAnC,SACA,4BAAQkB,QAAS,kBAAMlB,EAAY,KAAnC,WCpCcmB,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.b286c94a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [pending, setPending] = useState(true);\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    setTimeout(() => {\n      handleClick(1);\n    }, 2000);\n  }, []);\n\n  const handleClick = (val) => {\n    let url = \"http://localhost:4000/api\";\n    if (window.location.host.indexOf(\"localhost\") === -1) {\n      const { host } = window.location;\n      url = `${host}:4000/api`;\n      console.log(url);\n    }\n    let routing = \"test\";\n    if (val === 2) {\n      routing = \"test2\";\n    } else if (val === 3) {\n      routing = \"test3\";\n    }\n    url = `${url}/${routing}`;\n\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    })\n      // .then(response => console.log(\"response\"))\n      .then((response) => response.json())\n      .then((response) => {\n        setPending(false);\n        setData(JSON.stringify(response));\n      });\n  };\n\n  if (pending) return <div>Loading...</div>;\n  return (\n    <div>\n      {data}\n      <br />\n      <button onClick={() => handleClick(1)}>test1</button>\n      <button onClick={() => handleClick(2)}>test2</button>\n      <button onClick={() => handleClick(3)}>test3</button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}